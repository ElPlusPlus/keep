#!/usr/bin/env python3
import subprocess
import hashlib
import csv
import os
from pathlib import Path
import json

# CONFIG
REPO_DIR = Path(".")
FINGERPRINT_JSON = Path("keep-fingerprint.json")  # generated by fingerprint script
VERSIONS_FILE = REPO_DIR / "keep-versions.csv"
FINGERPRINTS_DIR = REPO_DIR / "releases"

# Ensure directories exist
FINGERPRINTS_DIR.mkdir(parents=True, exist_ok=True)

# 1. Generate fingerprint JSON
print("Generating fingerprint...")
subprocess.run(["bash", "generate-keep-fingerprint.sh"], check=True)

# 2. Read JSON data
with open(FINGERPRINT_JSON, "rb") as f:
    fingerprint_data = f.read()

# 3. Extract DietPi version from JSON
try:
    fp_json = json.loads(fingerprint_data.decode())
    dietpi_version = fp_json.get("dietpi_version", "")
except Exception:
    dietpi_version = ""

# 4. Compute SHA256 hash of fingerprint
fingerprint_hash = hashlib.sha256(fingerprint_data).hexdigest()
minor_hash = hashlib.sha256(dietpi_version.encode()).hexdigest()

# 5. Load existing versions.csv
versions = {}
if VERSIONS_FILE.exists():
    with open(VERSIONS_FILE, newline="") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            versions[row["fingerprint_hash"]] = row["version"]
else:
    # Create CSV with header if it doesn't exist
    with open(VERSIONS_FILE, "w", newline="") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["fingerprint_hash", "major_hash", "minor_hash", "version"])

# 6. Check if fingerprint already has a version
if fingerprint_hash in versions:
    version = versions[fingerprint_hash]
    print(f"Fingerprint already exists. Version: {version}")
else:
    # Determine last version and last DietPi version
    last_version = "1.0.0"
    last_minor_hash = ""
    if versions:
        # Get the last entry in CSV
        with open(VERSIONS_FILE, newline="") as csvfile:
            rows = list(csv.DictReader(csvfile))
            if rows:
                last_version = rows[-1]["version"]
                last_minor_hash = rows[-1]["minor_hash"]

    major, minor, patch = map(int, last_version.split("."))

    # Bump logic
    if not last_minor_hash:
        pass
    elif minor_hash and minor_hash != last_minor_hash:
        minor += 1
        patch = 0
    else:
        patch += 1

    version = f"{major}.{minor}.{patch}"

    # Append to CSV
    with open(VERSIONS_FILE, "a", newline="") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow([fingerprint_hash, "", minor_hash, version])

    # Save fingerprint file
    fingerprint_copy = FINGERPRINTS_DIR / f"{version}.json"
    with open(fingerprint_copy, "wb") as f:
        f.write(fingerprint_data)

    # Commit changes to Git
    #subprocess.run(["git", "-C", str(REPO_DIR), "add", str(fingerprint_copy), str(VERSIONS_FILE)], check=True)
    #subprocess.run(["git", "-C", str(REPO_DIR), "commit", "-m", f"Add fingerprint for version {version}"], check=True)

# 7. Save version locally
with open("device_version.txt", "w") as f:
    f.write(version + "\n")

print(f"Device version: {version}")
